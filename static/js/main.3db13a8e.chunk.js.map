{"version":3,"sources":["components/Form.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","placeholder","type","value","username","onChange","event","usernameHandleChange","target","password","passwordHandleChange","onClick","logIn","register","Header","App","useState","setUsername","setPassword","user","pass","setValues","display1","display2","display","setDisplay","style","currentUsername","currentPassword","preventDefault","console","log","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAiCeA,MA/Bf,SAAcC,GAkBV,OACI,yBAAKC,UAAU,YACX,0BAAMA,UAAU,QACZ,2BAAOA,UAAU,iBAAiBC,YAAY,WAAWC,KAAK,OAAOC,MAAOJ,EAAMK,SAAUC,SAnBxG,SAA8BC,GAC1BP,EAAMQ,qBAAqBD,EAAME,OAAOL,UAmBhC,2BAAOH,UAAU,iBAAiBC,YAAY,WAAWC,KAAK,WAAWC,MAAOJ,EAAMU,SAAUJ,SAhB5G,SAA8BC,GAC1BP,EAAMW,qBAAqBJ,EAAME,OAAOL,UAgBhC,4BAAQH,UAAU,cAAcW,QAb5C,SAAmBL,GACfP,EAAMa,MAAMN,KAYJ,UACA,wBAAIN,UAAU,WAAd,MACA,4BAAQW,QAXpB,SAAsBL,GAClBP,EAAMc,SAASP,IAUwBN,UAAU,oCAAzC,yBCdDc,MAXf,WACI,OACI,yBAAKd,UAAU,cACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,eAAd,cACA,wBAAIA,UAAU,WAAd,cCqDDe,MAtDf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNZ,EADM,KACIa,EADJ,OAEmBD,mBAAS,IAF5B,mBAENP,EAFM,KAEIS,EAFJ,OAGeF,mBAAS,CAACG,KAAM,GAAIC,KAAM,KAHzC,mBAGEC,GAHF,aAIiBL,mBAAS,CAACM,SAAU,QAASC,SAAU,SAJxD,mBAINC,EAJM,KAIGC,EAJH,KAkCb,OACE,6BACE,yBAAKC,MAAO,CAACF,QAASA,EAAQF,WAC5B,kBAAC,EAAD,MACA,kBAAC,EAAD,CACElB,SAAUA,EACVK,SAAUA,EACVF,qBAnCR,SAA8BJ,GAC5Bc,GAAY,SAAAU,GAAe,OAAIxB,MAmCzBO,qBAhCR,SAA8BP,GAC5Be,GAAY,SAAAU,GAAe,OAAIzB,MAgCzBS,MA7BR,SAAeN,GACbA,EAAMuB,iBACNR,GAAU,iBAAO,CACfF,KAAMf,EACNgB,KAAMX,MAGRQ,GAAY,SAAAU,GAAe,MAAI,MAC/BT,GAAY,SAAAU,GAAe,MAAI,MAC/BH,GAAW,iBAAO,CAChBH,SAAU,OACVC,SAAU,aAmBNV,SAfR,SAAkBP,GAChBA,EAAMuB,iBACNC,QAAQC,IAAI,gBAgBV,yBAAKL,MAAO,CAACF,QAASA,EAAQD,WAC5B,wBAAIG,MAAO,CAACM,UAAW,WAAvB,iBC1CYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.3db13a8e.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Form(props) {\n\n    function handleChangeUsername(event) {\n        props.usernameHandleChange(event.target.value)\n    }\n\n    function handleChangePassword(event) {\n        props.passwordHandleChange(event.target.value)\n    }\n\n    function callLogin(event) {\n        props.logIn(event)\n    }\n\n    function callRegister(event) {\n        props.register(event)\n    }\n\n    return(\n        <div className=\"form_div\">\n            <form className=\"form\">\n                <input className=\"username_input\" placeholder=\"username\" type=\"text\" value={props.username} onChange={handleChangeUsername}></input>\n                <input className=\"password_input\" placeholder=\"password\" type=\"password\" value={props.password} onChange={handleChangePassword}></input>\n                <button className=\"form_button\" onClick={callLogin}>Log In</button>\n                <h3 className=\"form_or\">or</h3>\n                <button onClick={callRegister} className=\"form_button form_button-register\">Create New Account</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Form","import React from \"react\"\n\nfunction Header() {\n    return(\n        <div className=\"header_div\">\n            <div className=\"header_text_div\">\n                <h1 className=\"header_text\">To-Do List</h1>\n                <h3 className=\"bysimon\">bySimon</h3>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React, { useState } from 'react';\nimport './App.css';\n//import componets\nimport Form from \"./components/Form\"\nimport Header from \"./components/Header\"\n\nfunction App() {\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [values, setValues] = useState({user: \"\", pass: \"\"})\n  const [display, setDisplay] = useState({display1: \"block\", display2: \"none\"})\n\n  function usernameHandleChange(value) {\n    setUsername(currentUsername => value)\n  }\n\n  function passwordHandleChange(value) {\n    setPassword(currentPassword => value)\n  }\n\n  function logIn(event) {\n    event.preventDefault()\n    setValues(() => ({\n      user: username,\n      pass: password\n    }))\n    //do i want to do this?\n    setUsername(currentUsername => \"\")\n    setPassword(currentPassword => \"\")\n    setDisplay(() => ({\n      display1: \"none\",\n      display2: \"block\"\n    }))\n  }\n\n  function register(event) {\n    event.preventDefault()\n    console.log(\"register\")\n  }\n\n  return(\n    <div>\n      <div style={{display: display.display1}}>\n        <Header />\n        <Form \n          username={username} \n          password={password} \n          usernameHandleChange={usernameHandleChange}\n          passwordHandleChange ={passwordHandleChange}\n          logIn={logIn}\n          register={register}\n        />\n      </div>\n      <div style={{display: display.display2}}>\n        <h1 style={{textAlign: \"center\"}}>Loading...</h1>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}